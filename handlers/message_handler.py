import psycopg2
from telegram import Update
from telegram.ext import ContextTypes
from utils.db import (
    add_user,
    user_exists,
    update_username,
    get_user_data,
    sanitize_username,
    claim_daily_reward,
    calculate_level,
    set_started_working,
    get_user_job,
    check_for_completed_work,
    get_top_users_by_level,
    get_top_users_by_cash,
)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    check_for_completed_work()
    
    username = sanitize_username(user.username)
    if not user_exists(user_id):
        username = username or f"user{user_id}"
        add_user(user_id, username)
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {username}! üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Eddies - –í–∞—à Euro Dollar Bot! üåü"
            " –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –∑–¥–µ—Å—å. –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é –≤–∞—Å –∂–¥—É—Ç –æ—Ç–ª–∏—á–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã! "
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã!"
        )

async def top_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    check_for_completed_work()
    user_id = update.message.from_user.id
    
    if not user_exists(user_id):
        await handle_message(update, context)
        return

    top_users = get_top_users_by_level()
    message = "üèÜ –¢–æ–ø 10 –ø–æ —É—Ä–æ–≤–Ω—è–º:\n"
    for username, experience in top_users:
        level, _ = calculate_level(experience)
        message += f"{username} - –£—Ä–æ–≤–µ–Ω—å: {level}\n"
    await update.message.reply_text(message)

async def top_cash(update: Update, context: ContextTypes.DEFAULT_TYPE):
    check_for_completed_work()
    user_id = update.message.from_user.id
    
    if not user_exists(user_id):
        await handle_message(update, context)
        return

    top_users = get_top_users_by_cash()
    message = "üí∞ –¢–æ–ø 10 –ø–æ –±–∞–ª–∞–Ω—Å—É:\n"
    for username, balance in top_users:
        message += f"{username} - –ë–∞–ª–∞–Ω—Å: {balance} –µ–≤—Ä–æ–¥–æ–ª–ª–∞—Ä–æ–≤\n"
    await update.message.reply_text(message)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    check_for_completed_work()
    
    if not user_exists(user_id):
        await handle_message(update, context)
        return

    user_data = get_user_data(user_id)
    job = get_user_job(user_id)
    
    if user_data:
        username, balance, experience = user_data[:3]
    else:
        username, balance, experience = 'unknown', 'unknown', 0

    level, exp_for_next_lvl = calculate_level(experience)
    
    await update.message.reply_text(
        f"–ò–º—è: {username} üé≠\n–ë–∞–ª–∞–Ω—Å: {balance} üí∞\n–û–ø—ã—Ç: {experience}/{exp_for_next_lvl} üìà\n–£—Ä–æ–≤–µ–Ω—å: {level} üèÜ\n–†–∞–±–æ—Ç–∞: {job} üõ†Ô∏è"
    )

async def work(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_data = get_user_data(user_id)
    check_for_completed_work()

    if not user_exists(user_id):
        await handle_message(update, context)
        return

    if user_data[3] is not None:
        await update.message.reply_text("–í—ã —É–∂–µ –Ω–∞ —Ä–∞–±–æ—Ç–µ!")
        return

    await update.message.reply_text("–í—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ä–∞–±–æ—Ç—É!")
    set_started_working(user_id)

async def set_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    check_for_completed_work()
    
    if not user_exists(user_id):
        await handle_message(update, context)
        return
    
    if context.args:
        new_name = " ".join(context.args)
        sanitized_name = sanitize_username(new_name)

        if not sanitized_name:
            return await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ —Ü–∏—Ñ—Ä—ã –∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")

        update_username(user_id, sanitized_name)
        await update.message.reply_text(f"–í–∞—à–µ –∏–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {sanitized_name}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è.")

async def claim_reward(update: Update, context: ContextTypes.DEFAULT_TYPE):
    check_for_completed_work()
    user_id = update.message.from_user.id
    
    if not user_exists(user_id):
        await handle_message(update, context)
        return
    
    message = claim_daily_reward(user_id)
    await update.message.reply_text(message)
